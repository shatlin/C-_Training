using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Web;
using System.Web.SessionState;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.HtmlControls;

namespace PVMODX
{
	/// <summary>
	/// This class is used for modifying Purchase Analysis.
	/// </summary>
	public class PVPAMOD : System.Web.UI.Page
	{
		
		protected System.Web.UI.WebControls.Panel pnlCriteria;
		protected System.Web.UI.WebControls.Panel pnlAnalysis;
		protected System.Web.UI.WebControls.Panel pnlSupplier;

		protected System.Web.UI.WebControls.Label lblNSN;
		protected System.Web.UI.WebControls.Label lblSupplier;
		protected System.Web.UI.WebControls.Label lblSaveResult;

		protected System.Web.UI.WebControls.Table tblAnalysis;
		protected System.Web.UI.WebControls.Table tblChoice;
		protected System.Web.UI.WebControls.Table tblpurAnalysis;
		protected System.Web.UI.WebControls.Table tblCriteria;
		protected System.Web.UI.WebControls.Table tblNSN;
		protected System.Web.UI.WebControls.Table tblWareHouse;
		protected System.Web.UI.WebControls.Table tblSupAnalysis;
		protected System.Web.UI.WebControls.Table tblProducts;
		protected System.Web.UI.WebControls.Table tblproductgrid;
		protected System.Web.UI.WebControls.Table tblError;
		protected System.Web.UI.WebControls.Table tblViewProducts;

		protected System.Web.UI.WebControls.RadioButtonList rdoAnalyseOn;
		protected System.Web.UI.WebControls.RadioButtonList rdoCriteria;
		
		protected System.Web.UI.WebControls.TextBox txtNSN;	

		protected System.Web.UI.WebControls.Button btnproductgrid;
		protected System.Web.UI.WebControls.Button btnNSN;
		protected System.Web.UI.WebControls.Button btnWareHouse;
		protected System.Web.UI.WebControls.Button btnSupplier;
		protected System.Web.UI.WebControls.Button btnViewProducts;
		protected System.Web.UI.WebControls.DataGrid DataGrid1;
		protected System.Web.UI.WebControls.DataGrid DataGrid2;
		protected System.Web.UI.WebControls.DataGrid DataGrid3;
					
		protected System.Web.UI.WebControls.LinkButton lnkChoice;
		protected System.Web.UI.WebControls.LinkButton lnkProducts;
		protected System.Web.UI.WebControls.LinkButton lnkAnalysis;

		protected MetaBuilders.WebControls.ComboBox cboSupplier;
		protected MetaBuilders.WebControls.ComboBox cboWareHouse;
		
		public static string nsnlist="";
		public static string selsupList="";
		public static string remarksList="";
		public static string analysisondata="";
		public static string criteria="";
		public static string origvendorlist="";
		public static string pano="";


		/// <summary>
		/// When the page is loaded create supplier grid and show the choices
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void Page_Load(object sender, System.EventArgs e)
		{
			
			if(!this.IsPostBack)
			{
				showPAresult();
				
			}
			//set all labels to empty
			lblSaveResult.Text ="";
			lblNSN.Text ="";
			lblSupplier.Text ="";
		
		}

		#region Web Form Designer generated code
		override protected void OnInit(EventArgs e)
		{
			//
			// CODEGEN: This call is required by the ASP.NET Web Form Designer.
			//
			InitializeComponent();
			base.OnInit(e);
		}
		
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{   
			this.btnNSN.Click += new System.EventHandler(this.btnNSN_Click);
			this.btnWareHouse.Click += new System.EventHandler(this.btnWareHouse_Click);
			this.btnSupplier.Click += new System.EventHandler(this.btnSupplier_Click);
			this.btnproductgrid.Click += new System.EventHandler(this.btnproductgrid_Click);
			this.btnViewProducts.Click += new System.EventHandler(this.btnViewProducts_Click );
			this.rdoAnalyseOn .SelectedIndexChanged +=new  System.EventHandler(this.rdoAnalyseOn_SelectedIndexChanged );
			this.lnkChoice.Click +=new System.EventHandler(this.lnkChoice_Click );
			this.lnkProducts.Click +=new System.EventHandler(this.lnkProducts_Click );
			this.lnkAnalysis .Click +=new System.EventHandler(this.lnkAnalysis_Click );
			this.Load += new System.EventHandler(this.Page_Load);

			/* The above events gets cleared when a new control is dragged and dropped
			 * because these events which are autogenerated are coded manually 
			 * in this program.If they are automatically deleted, copy and paste from
			 * the commented events below
			 * */
			//this.btnNSN.Click += new System.EventHandler(this.btnNSN_Click);
			//this.btnWareHouse.Click += new System.EventHandler(this.btnWareHouse_Click);
			//this.btnSupplier.Click += new System.EventHandler(this.btnSupplier_Click);
			//this.btnproductgrid.Click += new System.EventHandler(this.btnproductgrid_Click);
			//this.btnViewProducts.Click += new System.EventHandler(this.btnViewProducts_Click );
			//this.rdoAnalyseOn .SelectedIndexChanged +=new  System.EventHandler(this.rdoAnalyseOn_SelectedIndexChanged );
			//this.lnkChoice.Click +=new System.EventHandler(this.lnkChoice_Click );
			//this.lnkProducts.Click +=new System.EventHandler(this.lnkProducts_Click );
			//this.lnkAnalysis .Click +=new System.EventHandler(this.lnkAnalysis_Click );
			//this.Load += new System.EventHandler(this.Page_Load);


		}
		#endregion

		/// <summary>
		/// collects the result of a previously done purchase analysis
		/// and show the analysis
		/// </summary>
		public void showPAresult()
		{
			dbPurAnalysis dal=new dbPurAnalysis ();
			
			string vendors_analysed="";
			string analysed_on="";
			string analysedon_data="";
			string[] nsnsanalysed=null;
			string[] arrvendors_analysed=null;
			

			bindSupplier();
			pano=Request.Params["pano"];
			vendors_analysed=dal.getVendors_analysed(pano);
			arrvendors_analysed=vendors_analysed.Split ('!');
			analysed_on=dal.getanalysed_on(pano);
			analysedon_data=dal.getanalysedon_data(pano);
			setCheckSuppliers(arrvendors_analysed); //set the checkboxes on for vendors analysed 
			setCheckAnalysed_on(analysed_on);
			showChoice();
			setCheckAnalysedon_Data(analysedon_data,analysed_on);
			showtblproductgrid();
			autobindproductgrid(analysedon_data,analysed_on);
			nsnsanalysed=dal.getNSNsAnalysed(pano);
			setCheckProducts(nsnsanalysed);
			setAnalysison_data(analysed_on);
			dal.closedBConnection();
		
		}

		/// <summary>
		/// loop through all records in the products datagrid
		/// and collect all selected nsns in the global static
		/// variable nsnlist. 
		/// </summary>
		public void getSelectedNSNs()
		{
			nsnlist="";
			foreach (DataGridItem i in DataGrid2.Items) 
			{
				CheckBox chkProducts = (CheckBox) i.FindControl ("chkProducts");
				if (chkProducts.Checked && chkProducts.Enabled) 
				{
					nsnlist+=i.Cells[0].Text.Trim()+"!";
				}
			}
			
		}
		
	 
		/// <summary>
		/// Save the result of purchase analysis in tables
		/// PVPAHEAD and PVPADETL
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		protected void SavePA(object sender, System.EventArgs e)
		{
			string errorMsg="";
			dbPurAnalysis dal=new dbPurAnalysis ();
			
			ArrayList ErrorList = new ArrayList();

			/*
			* collecting The status of analysis for saving into database
			* later this can be used to retrieve the same state of criteria.
			*/
			string[]arrSupselected=selectedSuppliers(); // from the supplier grid
			string rdoAnalyseValue=rdoAnalyseOn.SelectedValue;
			string analysisonflag="";
			
			string vendorsAnlaysed="";
			string analysisby="";
			
			selsupList=Request.Params ["PVALUES"];
			remarksList=Request.Params ["RVALUES"];

			switch(rdoAnalyseValue)
			{
				case "nsn":
					analysisonflag="n";
					break;
				case "productlist":
					analysisonflag="p";
					break;
				case "warehouse":
					analysisonflag="w";
					break;
				case "supplier": 
					analysisonflag="s";
					break;
			}

			if(criteria=="margin")
				analysisby="m";
			else 
				analysisby="l";

			for(int i=0; i<arrSupselected.Length ; i++)
			{
				
				vendorsAnlaysed+=arrSupselected[i]+"!";

			}
			if(vendorsAnlaysed.Length >0)
				vendorsAnlaysed=vendorsAnlaysed.Substring (0,(vendorsAnlaysed.Length -1));

			
			
			string[] errorArray=null;
			string	 nsnvals=nsnlist;
			//string	 poplanno=dal.generateAutoNo ("POPLANNO");
			string	 poplanno=pano;
			// All selected nsns remarks and vendorids in the following arrays
			string[] arrnsn=nsnlist.Split ('!');
			string[] remarkid=remarksList.Split ('!');
			string[] vid=selsupList.Split ('!');
			
			//if  no supplier is available for any NSN, then throw errors
			for(int i=0;i<vid.Length-1 ;i++)
			{
				if(vid[i]=="")
				{
					ErrorList.Add ("No supplier Available for product with NSN "+arrnsn[i]);
				}
			}
			errorArray=(String[])ErrorList.ToArray(typeof(String));

			if(errorArray.Length >0)
			{
				bindErrorGrid(errorArray);
				lblSaveResult.Text ="Errors.Analysis Not saved into database";
			}
			else
			{
				errorMsg=dal.savePA(poplanno,nsnlist,remarksList,selsupList,origvendorlist,vendorsAnlaysed,analysisonflag,analysisondata,analysisby);
			
				if(errorMsg.Length >0)
				{
					hidetblChoice();
					hidetblproductgrid();
					showpnlAnalysis();
					dal.rollbackTrans ();
					lblSaveResult.Text ="Errors.Analysis Not saved into database";
				
				}
				else
				{
					lblSaveResult.Text ="Records successfully saved into database";
					dal.commitTrans ();
				}
			}
			dal.closedBConnection ();
		}
		
		/// <summary>
		/// When the link View Choice is clicked
		/// run the showchoice function to show the choice table
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		void lnkChoice_Click(Object sender, EventArgs e) 
		{
			showtblChoice();
	
		}


		/// <summary>
		/// When the link View Products is clicked
		///  show the product grid
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		void lnkProducts_Click(Object sender, EventArgs e) 
		{
			showtblproductgrid();
			hidetblError();
			
		}

		/// <summary>
		///When the link show Analysis is clicked
		///show the analysis panel 
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		void lnkAnalysis_Click(Object sender, EventArgs e) 
		{
		
			showpnlAnalysis();
		}
		

		/// <summary>
		/// After products are selected btnproductgrid is clicked to show the analysis table 
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void btnproductgrid_Click(object sender, System.EventArgs e)
		{
			analysis();
		}


		public void analysis()
		{
			string[]supselected= selectedSuppliers();
			getSelectedNSNs();
			if(supselected.Length ==0)
			{
				lblSupplier.Text ="please Select Suppliers";
				showtblChoice();
				hidetblproductgrid();
				
			}
			else
			{
				lblSupplier.Text ="";
				getSelectedNSNs();
				hidetblChoice();
				hidetblproductgrid();
				showpnlAnalysis();
			}
		}
		/// <summary>
		/// When the user analyses by a single nsn and presses btnNSN button  
		/// show nsn related tables and hide others
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void btnNSN_Click(object sender, System.EventArgs e)
		{
			nsnlist=txtNSN.Text;
			analysisondata=nsnlist;
			if(nsnlist.Length ==0)
			{
				lblNSN.Text ="please enter NSN";
				showtblChoice();
			}
			
			
			else
			{
				lblNSN.Text ="";
				string[]supselected= selectedSuppliers();
				if(supselected.Length ==0)
				{
					lblSupplier.Text="Please Select Suppliers";
					showtblChoice();
					
				}
				else
				{
					lblSupplier.Text ="";
					hidetblproductgrid();
					showpnlAnalysis();
					hidetblChoice();
					
				}
			}
		}
		

		
		/// <summary>
		/// When the user analyses by a warehouse and presses btnWareHouse button  
		/// show WareHouse related tables and hide others
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void btnWareHouse_Click(object sender, System.EventArgs e)
		{
			string warehouse=cboWareHouse.Text;
			analysisondata=warehouse;
			string[]supselected= selectedSuppliers();
			if(supselected.Length ==0)
			{
				lblSupplier.Text ="please Select Suppliers";
				showtblChoice();
				
			}
			if(warehouse.Length ==0)
			{
				lblSupplier.Text ="please Select Warehouse";
				
			}

			if(supselected.Length >0 && warehouse.Length >0)
			{
				lblSupplier.Text ="";
				hidetblChoice();
				showtblproductgrid();
				bindproducts(warehouse,"");
			}
		}

		
		/// <summary>
		/// When the user analyses by a Supplier and presses btnSupplier button  
		/// show Supplier related tables and hide others
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void btnSupplier_Click(object sender, System.EventArgs e)
		{
			string[]supselected= selectedSuppliers();
			string supplier=cboSupplier.Text;
			analysisondata=supplier;
			if(supplier.Length ==0)
			{
				lblSupplier.Text ="please Select The Supplier to Compare";
				
				
			}

			if(supselected.Length ==0)
			{
				lblSupplier.Text ="please Select Suppliers";
				showtblChoice();
				
			}
		
			if(supselected.Length >0 && supplier.Length >0)
			{
				lblSupplier.Text ="";
				dbPurAnalysis dal=new dbPurAnalysis ();
				
				string vendorcode=supplier.Substring (0,supplier.IndexOf ("-"));
				string supplierid=dal.getVendorid(vendorcode);
				bindproducts("",supplierid);
				dal.commitTrans ();
				dal.closedBConnection ();
				hidetblChoice();
				showtblproductgrid();
			}
			
			
		}


		/// <summary>
		///When the user analyses by all products and presses btnViewProducts button  
		/// show products related tables and hide others
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void btnViewProducts_Click(object sender, System.EventArgs e)
		{
			hidetblChoice();
			hidepnlAnalysis();
			string[]supselected= selectedSuppliers();
			analysisondata="";
			if(supselected.Length ==0)
			{
				lblSupplier.Text ="please Select Suppliers";
				showtblChoice();
				
			}
			if(supselected.Length >0)
			{
				showAllProducts();
			}
		}
		

		/// <summary>
		/// when select all button is pressed all products are selected or cleared
		/// This fucntion is redundant since a javascript handles this function
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void btnPrdSelectAll_Click(object sender, System.EventArgs e)
		{

			togglechkallproducts();	
		
		}

		public void  togglechkallproducts()
		{

		}

		/// <summary>
		/// when analysis is changed from one of NSN,warehouse,products or supplier
		/// to any other,then the related tables are shown and others hidden.
		/// for example,When the user analyses by a Supplier and presses btnSupplier button  
		/// show Supplier related tables and hide others
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="e"></param>
		private void rdoAnalyseOn_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			showChoice();
		}

		/// <summary>
		/// showing and hiding choice tables according to user choice
		/// </summary>
		public void  showChoice()
		{
			
			string analysis=rdoAnalyseOn.SelectedValue;
			
			switch(analysis)
			{
				case "nsn":
					craeteNSNselection();
					break;
				case "productlist":
					craeteProductListSelection();
					break;
				case "warehouse":
					craeteWHselection();
					break;
				case "supplier":
					craeteSupplierselection();
					break;
				
			}
		}

		/// <summary>
		/// displays product details satisfying user choice.
		/// For example, if user enters a NSN and presses view button
		/// then a single product detail record is shown.
		/// </summary>
		/// <param name="warehouse"></param>
		/// <param name="supplier"></param>
		private void bindproducts(string warehouse,string supplier)
		{
			DBLayer dal = new DBLayer();
			dbPurAnalysis PA=new dbPurAnalysis ();
			string vidlist="";
			string dgridNSN="";
			string retnsn	="";
			string[] vid=selectedSuppliers();
			int productCount=0;
			DataSet dsOTProducts = dal.PAbindproducts_DS(warehouse,supplier);
			DataGrid2.DataSource = dsOTProducts.Tables["products"].DefaultView;
			DataGrid2.DataBind();
			
			
			for(int i=0;i<vid.Length ;i++)
			{
				if(i<=(vid.Length-2))
					vidlist=vidlist+vid[i]+",";
				else
					vidlist=vidlist+vid[i];
			}
			productCount=DataGrid2.Items.Count;
			
			for(int j = 0;j < productCount; j++)
			{
				
				
				dgridNSN=DataGrid2.Items[j].Cells[5].Text;
				retnsn=PA.chkproduct(dgridNSN,vidlist);
				if(retnsn=="")
				{
					DataGrid2.Items[j].Cells [1].Enabled  =false;
					DataGrid2.Items[j].Cells [1].Text   =" ";

					DataGrid2.Items[j].ForeColor  = System.Drawing.Color.FromName("Red");
				}
				
				
			}
			
			PA.closedBConnection ();

			
		}
		/// <summary>
		///Errors are displayed in a grid 
		/// </summary>
		/// <param name="errorArray">array of errors</param>
		private void bindErrorGrid(string[] errorArray)
		{
			DataGrid3.DataSource = errorArray;
			DataGrid3.DataBind();
			if (errorArray.Length!=0)
				tblError.Visible =true;
		}
		private void bindSupplier()
		{
			DBLayer dal = new DBLayer();
			DataSet dsOTProducts = dal.PAsuppliergrid_DS();
			DataGrid1.DataSource = dsOTProducts.Tables["tblSuppliergrid"].DefaultView;
			DataGrid1.DataBind();
		}
		
		
		/// <summary>
		/// populates warehouse combobox cboWareHouse with all warehouses.
		/// </summary>
		private void populatecboWareHouse()
		{
			DBLayer dal = new DBLayer();
			
			System.Data.DataSet dsTitle = dal.PAwarehouse_DS();
			cboWareHouse.DataSource = dsTitle.Tables["tblwareHouse"];
			cboWareHouse.DataTextField = "warehouse";
			cboWareHouse.DataValueField = "warehouse";
			cboWareHouse.DataBind();
			
		}

		/// <summary>
		/// populates Supplier combobox cboSupplier with all Suppliers.
		/// </summary>
		private void populatecboSupplier()
		{
			DBLayer dal = new DBLayer();
			
			System.Data.DataSet dsTitle = dal.PAsupplier_DS();
			cboSupplier.DataSource = dsTitle.Tables["tblSupplier"];
			cboSupplier.DataTextField = "vendor";
			cboSupplier.DataBind();
		}

		
		/// <summary>
		/// gets the product details of a NSN 
		/// </summary>
		/// <param name="nsn"></param>
		/// <returns>an arraylist containing product details</returns>
		public ArrayList getProductdetls(string nsn)
		{
			

			dbPurAnalysis dal=new dbPurAnalysis ();
			ArrayList productdetls=dal.getProductdetls(nsn);
			dal.closedBConnection();
			return productdetls;

		}

		/// <summary>
		/// Detail table indicates the hidden inner table in the purchase analysis view.
		/// This detail table contain cost details of each product for each supplier
		/// </summary>
		/// <param name="nsn"></param>
		/// <returns></returns>
		public ArrayList getDetlTblRecords(string nsn)
		{
			
			dbPurAnalysis dal=new dbPurAnalysis ();
			ArrayList DetlTblRecords=dal.getDetlTblRecords(nsn);
			dal.closedBConnection();
			return DetlTblRecords;

		
		}

		/// <summary>
		/// For each product, CS3 suggests a supplier.This originally suggested supplier
		/// can be retrieved from stockm table.
		/// </summary>
		/// <param name="product"></param>
		/// <param name="warehouse"></param>
		/// <returns></returns>
		public string getstockmsupplier(string product,string warehouse)
		{
			dbPurAnalysis dal=new dbPurAnalysis ();
			string origsup=dal.getstockmsupplier(product,warehouse);
			dal.closedBConnection();
			return origsup;

		}

		/// <summary>
		/// For each product, CS3 suggests a supplier.This originally suggested supplier
		/// can be retrieved from stockm table.This function returns the vendorid of the
		/// orignal supplier
		/// </summary>
		/// <param name="product"></param>
		/// <param name="warehouse"></param>
		/// <returns></returns>
		public string getstockmsupplierid(string product,string warehouse)
		{
			dbPurAnalysis dal=new dbPurAnalysis ();
			string origsup=dal.getstockmsupplierid(product,warehouse);
			dal.closedBConnection();
			return origsup;

		}

		
		/// <summary>
		/// collects all remarks of the Purchase Analysis
		/// from PVREMDESC and PVREMHEAD tables
		/// </summary>
		/// <returns></returns>
		public ArrayList collectPARemarks()
		{
			dbPurAnalysis dal=new dbPurAnalysis ();
			ArrayList PAremarks=dal.collectPARemarks ();
			dal.commitTrans ();
			dal.closedBConnection();
			return PAremarks;
		}
		
		/// <summary>
		/// checks if a string sString exists in an array sArray
		/// </summary>
		/// <param name="sArray"></param>
		/// <param name="sString"></param>
		/// <returns>the index of the string in the array if it exists,else returns -1</returns>
		public int findIndex(string[] sArray,string sString)
		{
			int Index = -1;
	
			for(int s = 0;s<sArray.Length ;s++)
			{
	
				if(sArray[s] == sString)
				{
					Index = s;
				}			
			}
			return Index;	
	
		}

		
		/// <summary>
		/// hides the table tblError
		/// </summary>
		public void hidetblError()
		{
			tblError.Rows .Clear ();
			tblError.Visible =false;
		}

		/// <summary>
		/// shows the table tblError
		/// </summary>
		public void showtblError()
		{
			tblError.Visible =true;
		}

		/// <summary>
		/// hides the table tblNSN
		/// </summary>
		public void hidetblNSN()
		{
			//tblNSN.Rows.Clear();
			tblNSN.Visible =false;
		}
		
		/// <summary>
		/// shows the table tblNSN
		/// </summary>
		public void showtblNSN()
		{
			tblNSN.Visible =true;
			
		}
		
		/// <summary>
		/// hides the table tblWareHouse
		/// </summary>
		public void hidetblWareHouse()
		{
			//tblWareHouse.Rows.Clear();
			tblWareHouse.Visible =false;
		}

		/// <summary>
		/// shows the table tblWareHouse
		/// </summary>
		public void showtblWareHouse()
		{
			
			tblWareHouse.Visible =true;
		}

		/// <summary>
		/// hides the table tblSupAnalysis
		/// </summary>
		public void hidetblSupAnalysis()
		{
			//tblSupAnalysis.Rows.Clear();
			tblSupAnalysis.Visible =false;
		}

		
		/// <summary>
		/// shows the table tblSupAnalysis
		/// </summary>
		public void showtblSupAnalysis()
		{
			
			tblSupAnalysis.Visible =true;
		}

		/// <summary>
		/// hides the table tblproductgrid
		/// </summary>
		public void hidetblproductgrid()
		{
			
			//tblproductgrid.Rows.Clear ();
			tblproductgrid.Visible =false;
			lnkProducts.Visible	   =true;
		}

		/// <summary>
		/// shows the table tblproductgrid
		/// </summary>
		public void showtblproductgrid()
		{
			tblproductgrid.Visible =true;
			lnkProducts.Visible =false;
		}

		/// <summary>
		/// shows the panel pnlAnalysis
		/// </summary>
		public void showpnlAnalysis()
		{
			pnlAnalysis.Visible =true;
			lnkAnalysis.Visible =false;
		}

		
		/// <summary>
		/// hide the panel pnlAnalysis
		/// </summary>
		public void hidepnlAnalysis()
		{
			
			pnlAnalysis.Visible =false;
			lnkAnalysis.Visible =true;
		}
		
		/// <summary>
		/// shows the panel tblChoice
		/// </summary>
		public void showtblChoice()
		{
			tblChoice.Visible =true;
			lnkChoice.Visible =false;
		}

		/// <summary>
		/// hides the panel tblChoice
		/// </summary>
		public void hidetblChoice()
		{
			//	tblChoice.Rows.Clear ();
			tblChoice.Visible =false;
			lnkChoice.Visible =true;
		}

		/// <summary>
		/// shows the table tblViewProducts
		/// </summary>
		public void showtblViewProducts()
		{
			tblViewProducts.Visible =true;
		}

		/// <summary>
		/// hides the table tblViewProducts
		/// </summary>
		public void hidetblViewProducts()
		{
			tblViewProducts.Visible =false;
		}

		/// <summary>
		/// when Analysing on a NSN table shows the NSN table
		/// and hides all the other choice tables
		/// </summary>
		public void craeteNSNselection()
		{
			showtblNSN();
			hidetblWareHouse();
			hidetblSupAnalysis();
			hidepnlAnalysis();
			hidetblViewProducts();
			hidetblproductgrid();
			hidetblError();
			
		}

		
		/// <summary>
		/// when Analysing on all products shows the tblviewproducts table
		/// and hides all the other choice tables
		/// </summary>
		public void craeteProductListSelection()
		{
			
			showtblChoice();
			hidetblWareHouse();
			hidetblNSN();
			hidetblSupAnalysis();
			hidepnlAnalysis();
			showtblViewProducts();
			hidetblError();
			
		}


	

		/// <summary>
		/// when Analysing on warehouse shows the tblWareHouse table
		/// and hides all the other choice tables
		/// </summary>
		public void craeteWHselection()
		{
					
			showtblWareHouse();
			hidepnlAnalysis();
			hidetblNSN();
			hidetblSupAnalysis();
			hidetblViewProducts();
			hidetblproductgrid();
			hidetblError();
			populatecboWareHouse();

		}

		/// <summary>
		/// when Analysing on suppliers shows the tblSupAnalysis table
		/// and hides all the other choice tables
		/// </summary>
		public void craeteSupplierselection()
		{
			
			showtblSupAnalysis();
			hidetblWareHouse();
			hidepnlAnalysis();
			hidetblNSN();
			hidetblViewProducts();
			hidetblproductgrid();
			hidetblError();
			
			populatecboSupplier();
			
		}

		/// <summary>
		/// shows all products in table tblproductgrid
		/// </summary>
		public void showAllProducts()
		{
			showtblproductgrid();
			bindproducts("","");
		}

		
		/// <summary>
		/// Returns the vendor id of the  vendor selected from cboSupplier
		/// </summary>
		/// <returns></returns>
		public string getcboSelectedVendorid()
		{
			string supplier=cboSupplier.Text;

			if(supplier.Length >0)
			{
				dbPurAnalysis dal=new dbPurAnalysis ();
				string vendorcode=supplier.Substring (0,supplier.IndexOf ("-"));
				string supplierid=dal.getVendorid(vendorcode);
				dal.commitTrans ();
				dal.closedBConnection ();
				return supplierid;
			}
			
			return "";
		}

		/// <summary>
		/// Returns the vendor name of the  vendor selected from cboSupplier
		/// </summary>
		/// <param name="vendorid"></param>
		/// <returns></returns>
		public string getcboSelectedVendorName(string vendorid)
		{
			
			dbPurAnalysis dal=new dbPurAnalysis ();
			string vendordispname="";
			if(vendorid.Length ==0)
			{
				
				return "";
			}
			
			else
			{
			
				vendordispname=dal.getSuppliername_selected(vendorid);
				
				dal.commitTrans ();
				dal.closedBConnection ();
			}
			return vendordispname;
		}
	
		/// <summary>
		/// collects the vendor id of all the selected suppliers in an array
		/// </summary>
		/// <returns></returns>
		public string[] selectedSuppliers()
		{
			
			ArrayList supplierlist=new ArrayList();
			string[] supplierlistarray=null;
			foreach (DataGridItem i in DataGrid1.Items) 
			{
							
				CheckBox chkVendorid = (CheckBox) i.FindControl ("chkVendorid");
				if (chkVendorid.Checked) 
				{
					supplierlist.Add (i.Cells[0].Text.Trim());
				}
				
			}

			supplierlistarray=(String[])supplierlist.ToArray(typeof(String));
			
			return supplierlistarray;
			
		}


		/// <summary>
		/// gets the anaysed vendor id list from database 
		/// and checks the checkboxes of those vendors
		/// </summary>
		/// <param name="arrvendors_analysed"></param>
		public void setCheckSuppliers(string[] arrvendors_analysed)
		{
			
			
			foreach (DataGridItem i in DataGrid1.Items) 
			{
							
				CheckBox chkVendorid = (CheckBox) i.FindControl ("chkVendorid");
				string chkVendoridValue=i.Cells[0].Text.Trim();
				
				if (findIndex(arrvendors_analysed,chkVendoridValue)!=-1) 
				{
					chkVendorid.Checked =true;	
				}
				
			}

				
		}

		
		/// <summary>
		/// gets the anaysed on information fromd database 
		/// and sets that radio button selected
		/// </summary>
		/// <param name="analysed_on"></param>
		/// 
		public void setCheckAnalysed_on(string analysed_on)
		{
			switch(analysed_on)
			{
				case "n":
					rdoAnalyseOn.SelectedValue ="nsn";
					break;
				case "p":
					rdoAnalyseOn.SelectedValue ="productlist";
					break;
				case "w":
					rdoAnalyseOn.SelectedValue ="warehouse";
					break;
				case "s": 
					rdoAnalyseOn.SelectedValue ="supplier";
					break;
			}
		}

		/// <summary>
		///  gets the anaysed on information fromd database 
		/// and collects the analysed on data from the respective table
		/// for example, if analysed on NSN, then a static variable
		/// analysisondata is set as the value of txtNSN.text
		/// </summary>
		/// <param name="analysed_on"></param>
		public void setAnalysison_data(string analysed_on)
		{
			switch(analysed_on)
			{
				case "n":
					analysisondata=txtNSN.Text;
					break;
				case "p":
					analysisondata="";
					break;
				case "w":
					analysisondata=cboWareHouse.Text; 
					break;
				case "s": 
					analysisondata=cboSupplier.Text;
					break;
			}
		
		}
		/// <summary>
		/// gets the anaysed on information fromd database 
		/// and sets the analysed on data to the respective table
		/// for example, if analysed on NSN
		/// txtNSN's text is set to the value of a static variable
		/// </summary>
		/// <param name="analysedon_data"></param>
		/// <param name="analysed_on"></param>
		public void setCheckAnalysedon_Data(string analysedon_data,string analysed_on)
		{
			switch(analysed_on)
			{
				case "n":
					txtNSN.Text =analysedon_data;
					break;
				case "p":
					
					break;
				case "w":
					cboWareHouse.Text  =analysedon_data;
					break;
				case "s": 
					cboSupplier.Text=analysedon_data;
					break;
			}
		}


		/// <summary>
		/// show the details of products according to the analyse on value
		/// </summary>
		/// <param name="analysedon_data"></param>
		/// <param name="analysed_on"></param>
		public void autobindproductgrid(string analysedon_data,string analysed_on)
		{
			switch(analysed_on)
			{
				case "n":
					break;
				case "p":
					bindproducts("","");
					break;
				case "w":
					bindproducts(cboWareHouse.Text,"");
					break;
				case "s": 
					bindproducts("",cboSupplier.Text);
					break;
			}
		}

		/// <summary>
		/// collect all nsns analysed and in the product grid
		/// set all these products selected
		/// </summary>
		/// <param name="nsnsanalysed"></param>
		public void setCheckProducts(string[] nsnsanalysed)
		{
		
			
			string dgridNSN="";
			
			foreach (DataGridItem i in DataGrid2.Items) 
			{
				dgridNSN=i.Cells[5].Text;
				
				if(findIndex(nsnsanalysed,dgridNSN)!=-1)
				{
					CheckBox chkProducts = (CheckBox) i.FindControl ("chkProducts");
					i.Cells [1].Enabled  =true;
					chkProducts.Checked  =true;

				}
				
				
			}
			

		}


		
		/// <summary>
		/// collects the vendor names of all the selected suppliers in an array
		/// </summary>
		/// <returns></returns>
		public string[] getSupplierName()
		{
			ArrayList listVendorname=new ArrayList();
			string [] arrVendorname=null;
			string[] arrVendorid=selectedSuppliers();
			dbPurAnalysis dal=new dbPurAnalysis ();
			
			if(arrVendorid.Length ==0)
			{
				lblSupplier.Text ="please Select Suppliers";
				listVendorname.Add("-1");
				arrVendorname=(String[])listVendorname.ToArray(typeof(String));
				dal.closedBConnection ();
				return arrVendorname;
			}
			
			else
			{
				lblSupplier.Text ="";
				listVendorname.AddRange (dal.getSupplierName(arrVendorid));
				arrVendorname=(String[])listVendorname.ToArray(typeof(String));
				dal.commitTrans ();
				dal.closedBConnection ();
			}
			return arrVendorname;

		}
		
	
		
	}
	
}
